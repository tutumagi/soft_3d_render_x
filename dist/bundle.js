(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
}); /// <reference path="babylon.math.ts"/>

var main_1 = require("./main");

var canvas;
var device;
var mesh;
var meshes = [];
var camera;
document.addEventListener("DOMContentLoaded", init, false);

function init() {
  canvas = document.getElementById("frontBuffer");
  mesh = new main_1.SoftEngine.Mesh("Cube", 8);
  meshes.push(mesh);
  camera = new main_1.SoftEngine.Camera();
  device = new main_1.SoftEngine.Device(canvas);
  mesh.vertices[0] = new BABYLON.Vector3(-1, 1, 1);
  mesh.vertices[1] = new BABYLON.Vector3(1, 1, 1);
  mesh.vertices[2] = new BABYLON.Vector3(-1, -1, 1);
  mesh.vertices[3] = new BABYLON.Vector3(-1, -1, -1);
  mesh.vertices[4] = new BABYLON.Vector3(-1, 1, -1);
  mesh.vertices[5] = new BABYLON.Vector3(1, 1, -1);
  mesh.vertices[6] = new BABYLON.Vector3(1, -1, 1);
  mesh.vertices[7] = new BABYLON.Vector3(1, -1, -1);
  camera.position = new BABYLON.Vector3(0, 0, 10);
  camera.target = new BABYLON.Vector3(0, 0, 0); // Calling the HTML5 rendering loop

  requestAnimationFrame(drawingLoop);
}

function drawingLoop() {
  device.clear(); // rotating slightly the cube during each frame rendered

  mesh.rotation.x += 0.01;
  mesh.rotation.y += 0.01; // Doing the various matrix operations

  device.render(camera, meshes); // Flushing the back buffer into the front buffer

  device.present(); // Calling the HTML5 rendering loop recursively

  requestAnimationFrame(drawingLoop);
}

},{"./main":2}],2:[function(require,module,exports){
"use strict"; /// <reference path="babylon.math.ts"/>

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SoftEngine;

(function (SoftEngine) {
  var Camera =
  /** @class */
  function () {
    function Camera() {
      this.position = BABYLON.Vector3.Zero();
      this.target = BABYLON.Vector3.Zero();
    }

    return Camera;
  }();

  SoftEngine.Camera = Camera;

  var Mesh =
  /** @class */
  function () {
    function Mesh(name, verticesCount) {
      this.name = name;
      this.vertices = new Array(verticesCount);
      this.rotation = BABYLON.Vector3.Zero();
      this.postion = BABYLON.Vector3.Zero();
    }

    return Mesh;
  }();

  SoftEngine.Mesh = Mesh;

  var Device =
  /** @class */
  function () {
    function Device(canvas) {
      this.workingCanvas = canvas;
      this.workingWidth = canvas.width;
      this.workingHeight = canvas.height;
      this.workingContext = this.workingCanvas.getContext("2d");
    }

    Device.prototype.clear = function () {
      this.workingContext.clearRect(0, 0, this.workingWidth, this.workingHeight);
      this.backbuffer = this.workingContext.getImageData(0, 0, this.workingWidth, this.workingHeight);
    };

    Device.prototype.present = function () {
      this.workingContext.putImageData(this.backbuffer, 0, 0);
    };

    Device.prototype.putPixel = function (x, y, color) {
      this.backbufferdata = this.backbuffer.data;
      var index = ((x >> 0) + (y >> 0) * this.workingWidth) * 4;
      this.backbufferdata[index] = color.r * 255;
      this.backbufferdata[index + 1] = color.g * 255;
      this.backbufferdata[index + 2] = color.b * 255;
      this.backbufferdata[index + 3] = color.a * 255;
    };

    Device.prototype.project = function (coord, transMat) {
      var point = BABYLON.Vector3.TransformCoordinates(coord, transMat);
      var x = point.x * this.workingWidth + this.workingWidth / 2.0 >> 0;
      var y = -point.y * this.workingHeight + this.workingHeight / 2.0 >> 0;
      return new BABYLON.Vector2(x, y);
    };

    Device.prototype.drawPoint = function (point) {
      if (point.x >= 0 && point.y >= 0 && point.x < this.workingWidth && point.y < this.workingHeight) {
        this.putPixel(point.x, point.y, new BABYLON.Color4(1, 1, 0, 1));
      }
    };

    Device.prototype.render = function (camera, meshes) {
      var viewMatrix = BABYLON.Matrix.LookAtLH(camera.position, camera.target, BABYLON.Vector3.Up());
      var projectMatrix = BABYLON.Matrix.PerspectiveFovLH(0.78, this.workingWidth / this.workingHeight, 0.01, 1.0);

      for (var _i = 0, meshes_1 = meshes; _i < meshes_1.length; _i++) {
        var cMesh = meshes_1[_i];
        var worldMatrix = BABYLON.Matrix.RotationYawPitchRoll(cMesh.rotation.y, cMesh.rotation.x, cMesh.rotation.z).multiply(BABYLON.Matrix.Translation(cMesh.postion.x, cMesh.postion.y, cMesh.postion.z));
        var transformMatrix = worldMatrix.multiply(viewMatrix).multiply(projectMatrix);

        for (var _a = 0, _b = cMesh.vertices; _a < _b.length; _a++) {
          var indexVertex = _b[_a];
          var projectPoint = this.project(indexVertex, transformMatrix);
          this.drawPoint(projectPoint);
        }
      }
    };

    return Device;
  }();

  SoftEngine.Device = Device;
})(SoftEngine = exports.SoftEngine || (exports.SoftEngine = {}));

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
