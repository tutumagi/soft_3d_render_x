(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
}); /// <reference path="babylon.math.ts"/>

var main_1 = require("./main");

var canvas;
var device;
var mesh;
var meshes = [];
var camera;
document.addEventListener("DOMContentLoaded", init, false);

function init() {
  canvas = document.getElementById("frontBuffer"); // mesh = new SoftEngine.Mesh("Cube", 8);
  // meshes.push(mesh);
  // mesh.vertices[0] = new BABYLON.Vector3(-1, 1, 1);
  // mesh.vertices[1] = new BABYLON.Vector3(1, 1, 1);
  // mesh.vertices[2] = new BABYLON.Vector3(-1, -1, 1);
  // mesh.vertices[3] = new BABYLON.Vector3(-1, -1, -1);
  // mesh.vertices[4] = new BABYLON.Vector3(-1, 1, -1);
  // mesh.vertices[5] = new BABYLON.Vector3(1, 1, -1);
  // mesh.vertices[6] = new BABYLON.Vector3(1, -1, 1);
  // mesh.vertices[7] = new BABYLON.Vector3(1, -1, -1);

  mesh = new main_1.SoftEngine.Mesh("Cube", 8, 12);
  meshes.push(mesh);
  mesh.vertices[0] = new BABYLON.Vector3(-1, 1, 1);
  mesh.vertices[1] = new BABYLON.Vector3(1, 1, 1);
  mesh.vertices[2] = new BABYLON.Vector3(-1, -1, 1);
  mesh.vertices[3] = new BABYLON.Vector3(1, -1, 1);
  mesh.vertices[4] = new BABYLON.Vector3(-1, 1, -1);
  mesh.vertices[5] = new BABYLON.Vector3(1, 1, -1);
  mesh.vertices[6] = new BABYLON.Vector3(1, -1, -1);
  mesh.vertices[7] = new BABYLON.Vector3(-1, -1, -1);
  mesh.faces[0] = {
    A: 0,
    B: 1,
    C: 2
  };
  mesh.faces[1] = {
    A: 1,
    B: 2,
    C: 3
  };
  mesh.faces[2] = {
    A: 1,
    B: 3,
    C: 6
  };
  mesh.faces[3] = {
    A: 1,
    B: 5,
    C: 6
  };
  mesh.faces[4] = {
    A: 0,
    B: 1,
    C: 4
  };
  mesh.faces[5] = {
    A: 1,
    B: 4,
    C: 5
  };
  mesh.faces[6] = {
    A: 2,
    B: 3,
    C: 7
  };
  mesh.faces[7] = {
    A: 3,
    B: 6,
    C: 7
  };
  mesh.faces[8] = {
    A: 0,
    B: 2,
    C: 7
  };
  mesh.faces[9] = {
    A: 0,
    B: 4,
    C: 7
  };
  mesh.faces[10] = {
    A: 4,
    B: 5,
    C: 6
  };
  mesh.faces[11] = {
    A: 4,
    B: 6,
    C: 7
  };
  camera = new main_1.SoftEngine.Camera();
  device = new main_1.SoftEngine.Device(canvas);
  camera.position = new BABYLON.Vector3(0, 0, 10);
  camera.target = new BABYLON.Vector3(0, 0, 0); // Calling the HTML5 rendering loop

  requestAnimationFrame(drawingLoop);
}

function drawingLoop() {
  device.clear(); // rotating slightly the cube during each frame rendered

  mesh.rotation.x += 0.01;
  mesh.rotation.y += 0.01; // Doing the various matrix operations

  device.render(camera, meshes); // Flushing the back buffer into the front buffer

  device.present(); // Calling the HTML5 rendering loop recursively

  requestAnimationFrame(drawingLoop);
}

},{"./main":2}],2:[function(require,module,exports){
"use strict"; /// <reference path="babylon.math.ts"/>

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SoftEngine;

(function (SoftEngine) {
  var Camera =
  /** @class */
  function () {
    function Camera() {
      this.position = BABYLON.Vector3.Zero();
      this.target = BABYLON.Vector3.Zero();
    }

    return Camera;
  }();

  SoftEngine.Camera = Camera;

  var Mesh =
  /** @class */
  function () {
    function Mesh(name, verticesCount, facesCount) {
      this.name = name;
      this.vertices = new Array(verticesCount);
      this.faces = new Array(facesCount);
      this.rotation = BABYLON.Vector3.Zero();
      this.postion = BABYLON.Vector3.Zero();
    }

    return Mesh;
  }();

  SoftEngine.Mesh = Mesh;

  var Device =
  /** @class */
  function () {
    function Device(canvas) {
      this.workingCanvas = canvas;
      this.workingWidth = canvas.width;
      this.workingHeight = canvas.height;
      this.workingContext = this.workingCanvas.getContext("2d");
    }

    Device.prototype.clear = function () {
      this.workingContext.clearRect(0, 0, this.workingWidth, this.workingHeight);
      this.backbuffer = this.workingContext.getImageData(0, 0, this.workingWidth, this.workingHeight);
    };

    Device.prototype.present = function () {
      this.workingContext.putImageData(this.backbuffer, 0, 0);
    };

    Device.prototype.putPixel = function (x, y, color) {
      this.backbufferdata = this.backbuffer.data;
      var index = ((x >> 0) + (y >> 0) * this.workingWidth) * 4;
      this.backbufferdata[index] = color.r * 255;
      this.backbufferdata[index + 1] = color.g * 255;
      this.backbufferdata[index + 2] = color.b * 255;
      this.backbufferdata[index + 3] = color.a * 255;
    };

    Device.prototype.project = function (coord, transMat) {
      var point = BABYLON.Vector3.TransformCoordinates(coord, transMat);
      var x = point.x * this.workingWidth + this.workingWidth / 2.0 >> 0;
      var y = -point.y * this.workingHeight + this.workingHeight / 2.0 >> 0;
      return new BABYLON.Vector2(x, y);
    };

    Device.prototype.drawPoint = function (point) {
      if (point.x >= 0 && point.y >= 0 && point.x < this.workingWidth && point.y < this.workingHeight) {
        this.putPixel(point.x, point.y, new BABYLON.Color4(1, 1, 0, 1));
      }
    };
    /** 绘制线条 是一个 递归绘制起始点 - 中间点 - 结束点（总共 3 pixel）的过程 */


    Device.prototype.drawLine = function (point0, point1) {
      var dist = point1.subtract(point0).length();

      if (dist < 2) {
        return;
      }

      var middlePoint = point0.add(point1.subtract(point0).scale(0.5));
      this.drawPoint(middlePoint);
      this.drawLine(point0, middlePoint);
      this.drawLine(middlePoint, point1);
    };

    Device.prototype.render = function (camera, meshes) {
      var viewMatrix = BABYLON.Matrix.LookAtLH(camera.position, camera.target, BABYLON.Vector3.Up());
      var projectMatrix = BABYLON.Matrix.PerspectiveFovLH(0.78, this.workingWidth / this.workingHeight, 0.01, 1.0);

      for (var _i = 0, meshes_1 = meshes; _i < meshes_1.length; _i++) {
        var cMesh = meshes_1[_i];
        var worldMatrix = BABYLON.Matrix.RotationYawPitchRoll(cMesh.rotation.y, cMesh.rotation.x, cMesh.rotation.z).multiply(BABYLON.Matrix.Translation(cMesh.postion.x, cMesh.postion.y, cMesh.postion.z));
        var transformMatrix = worldMatrix.multiply(viewMatrix).multiply(projectMatrix);
        /** draw points */

        for (var _a = 0, _b = cMesh.vertices; _a < _b.length; _a++) {
          var indexVertex = _b[_a];
          var projectPoint = this.project(indexVertex, transformMatrix);
          this.drawPoint(projectPoint);
        }
        /** draw lines */
        // for (let i = 0; i < cMesh.vertices.length - 1; i++) {
        //     const point0 = this.project(cMesh.vertices[i], transformMatrix);
        //     const point1 = this.project(cMesh.vertices[i + 1], transformMatrix);
        //     this.drawLine(point0, point1);
        // }

        /** draw faces */


        for (var i = 0; i < cMesh.faces.length; i++) {
          var currentFace = cMesh.faces[i];
          var vertexA = cMesh.vertices[currentFace.A];
          var vertexB = cMesh.vertices[currentFace.B];
          var vertexC = cMesh.vertices[currentFace.C];
          var pixelA = this.project(vertexA, transformMatrix);
          var pixelB = this.project(vertexB, transformMatrix);
          var pixelC = this.project(vertexC, transformMatrix);
          this.drawLine(pixelA, pixelB);
          this.drawLine(pixelB, pixelC);
          this.drawLine(pixelC, pixelA);
        }
      }
    };

    return Device;
  }();

  SoftEngine.Device = Device;
})(SoftEngine = exports.SoftEngine || (exports.SoftEngine = {}));

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
